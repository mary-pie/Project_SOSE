//bind the model type symbol to an existing metamodel definition
modeltype asmRia uses asmRia::richElementsMetamodel;
modeltype uml uses "http://www.eclipse.org/uml2/5.0.0/UML";

transformation sampleUml2asmRia(in src_model : uml, out target_model : asmRia);

main() {
	src_model.objectsOfType(State) -> map StateToRichService();
	src_model.objectsOfType(UseCase) -> map UseCaseToRichNode();
	src_model.objectsOfType(Class) -> map ClassToRichEntity();
	src_model.objectsOfType(Class) -> map ClassToRichValueObject();
	
}


/*
	Mapping da <<service>> a RichService
*/
mapping State::StateToRichService() : RichService
	when {
  		-- You need to use the fully qualified name!!
  		not self.getAppliedStereotype('model::ASMRia Profile::service').oclIsUndefined();
	}
	{
		log("Name of the Automaton: " + self.getAppliedStereotype('model::ASMRia Profile::service').repr());
	  	result.name := self.name; 
	}


/*
	Mapping da <<UseCase>> a RichNode
*/	
mapping UseCase::UseCaseToRichNode() : RichNode
	when {
  		-- You need to use the fully qualified name!!
  		not self.getAppliedStereotype('model::ASMRia Profile::node').oclIsUndefined();
	};
	
	
/*
	Mapping da Class <<class>> a RichEntity
*/
mapping Class::ClassToRichEntity() : RichEntity
	when {
  -- You need to use the fully qualified name!!
  		not self.getAppliedStereotype('model::ASMRia Profile::entity').oclIsUndefined();
	}
	{
		log("Name of the Automaton: " + self.getAppliedStereotype('model::ASMRia Profile::entity').repr());
		result.name := self.name;
	}
		
/*
	Mapping da Class <<class>> a RichValueObject
*/
	
mapping Class::ClassToRichValueObject() : RichValueObject
	when {
  		-- You need to use the fully qualified name!!
  		not self.getAppliedStereotype('model::ASMRia Profile::valueObject').oclIsUndefined();
	};